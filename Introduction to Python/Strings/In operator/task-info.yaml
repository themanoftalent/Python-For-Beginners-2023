type: edu
files:
- name: in_operator.py
  visible: true
  placeholders:
  - offset: 99
    length: 18
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 99
    initialized_from_dependency: false
    possible_answer: '''ice'' in ice_cream'
    selected: true
    status: Solved
  text: |
    ice_cream = "ice cream"
    print("cream" in ice_cream)    # print boolean result directly

    contains = type here
    print(contains)
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test_helper import run_common_tests, passed, failed, import_task_file, get_answer_placeholders


    def test_value():
        file = import_task_file()
        if hasattr(file, "contains") and file.contains:
            passed()
        else:
            failed("Use 'in' operator for this check")

    def test_window():
        window = get_answer_placeholders()[0]

        if " in " in window:
            passed()
        else:
            failed("Use 'in' operator for this check")

    def test_ice_cream():
        window = get_answer_placeholders()[0]

        if "ice cream" in window or "ice_cream":
            passed()
        else:
            failed("Check if there is 'ice' in 'ice cream'")


    if __name__ == '__main__':
        run_common_tests()

        test_value()
        test_window()
        test_ice_cream()
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 22 Oct 2020 08:12:30 UTC
record: -1
